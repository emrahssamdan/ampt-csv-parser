import { createRequire as topLevelCreateRequire } from 'module'
const require = topLevelCreateRequire(import.meta.url || __dirname)
import {
  Client,
  Command,
  DEFAULT_RETRY_MODE,
  Hash,
  HttpRequest,
  NODE_MAX_ATTEMPT_CONFIG_OPTIONS,
  NODE_REGION_CONFIG_FILE_OPTIONS,
  NODE_REGION_CONFIG_OPTIONS,
  NODE_RETRY_MODE_CONFIG_OPTIONS,
  NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
  NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
  NoOpLogger,
  NodeHttpHandler,
  ServiceException,
  calculateBodyLength,
  decorateDefaultCredentialProvider,
  decorateServiceException,
  defaultProvider,
  defaultUserAgent,
  emitWarningIfUnsupportedVersion,
  expectNonNull,
  expectObject,
  expectString,
  fromBase64,
  fromUtf8,
  getAwsAuthPlugin,
  getContentLengthPlugin,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getUserAgentPlugin,
  loadConfig,
  loadConfigsForDefaultMode,
  map,
  parseRfc3339DateTimeWithOffset,
  parseUrl,
  resolveAwsAuthConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  resolvedPath,
  streamCollector,
  throwDefaultError,
  toBase64,
  toUtf8
} from "./chunk-XBMB5PVN.js";
import {
  __publicField
} from "./chunk-TTZTDAPF.js";

// websockets/index.ts
import { TextEncoder } from "util";

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "execute-api"
  };
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/package.json
var package_default = {
  name: "@aws-sdk/client-apigatewaymanagementapi",
  description: "AWS SDK for JavaScript Apigatewaymanagementapi Client for Node.js, Browser and React Native",
  version: "3.272.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "tsc -p tsconfig.cjs.json",
    "build:docs": "typedoc",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo apigatewaymanagementapi"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "3.0.0",
    "@aws-crypto/sha256-js": "3.0.0",
    "@aws-sdk/client-sts": "3.272.0",
    "@aws-sdk/config-resolver": "3.272.0",
    "@aws-sdk/credential-provider-node": "3.272.0",
    "@aws-sdk/fetch-http-handler": "3.272.0",
    "@aws-sdk/hash-node": "3.272.0",
    "@aws-sdk/invalid-dependency": "3.272.0",
    "@aws-sdk/middleware-content-length": "3.272.0",
    "@aws-sdk/middleware-endpoint": "3.272.0",
    "@aws-sdk/middleware-host-header": "3.272.0",
    "@aws-sdk/middleware-logger": "3.272.0",
    "@aws-sdk/middleware-recursion-detection": "3.272.0",
    "@aws-sdk/middleware-retry": "3.272.0",
    "@aws-sdk/middleware-serde": "3.272.0",
    "@aws-sdk/middleware-signing": "3.272.0",
    "@aws-sdk/middleware-stack": "3.272.0",
    "@aws-sdk/middleware-user-agent": "3.272.0",
    "@aws-sdk/node-config-provider": "3.272.0",
    "@aws-sdk/node-http-handler": "3.272.0",
    "@aws-sdk/protocol-http": "3.272.0",
    "@aws-sdk/smithy-client": "3.272.0",
    "@aws-sdk/types": "3.272.0",
    "@aws-sdk/url-parser": "3.272.0",
    "@aws-sdk/util-base64": "3.208.0",
    "@aws-sdk/util-body-length-browser": "3.188.0",
    "@aws-sdk/util-body-length-node": "3.208.0",
    "@aws-sdk/util-defaults-mode-browser": "3.272.0",
    "@aws-sdk/util-defaults-mode-node": "3.272.0",
    "@aws-sdk/util-endpoints": "3.272.0",
    "@aws-sdk/util-retry": "3.272.0",
    "@aws-sdk/util-user-agent-browser": "3.272.0",
    "@aws-sdk/util-user-agent-node": "3.272.0",
    "@aws-sdk/util-utf8": "3.254.0",
    tslib: "^2.3.1"
  },
  devDependencies: {
    "@aws-sdk/service-client-documentation-generator": "3.208.0",
    "@tsconfig/node14": "1.0.3",
    "@types/node": "^14.14.31",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typedoc: "0.19.2",
    typescript: "~4.6.2"
  },
  overrides: {
    typedoc: {
      typescript: "~4.6.2"
    }
  },
  engines: {
    node: ">=14.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-apigatewaymanagementapi",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-apigatewaymanagementapi"
  }
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/endpoint/ruleset.js
var p = "required";
var q = "fn";
var r = "argv";
var s = "ref";
var a = "PartitionResult";
var b = "tree";
var c = "error";
var d = "endpoint";
var e = { [p]: false, "type": "String" };
var f = { [p]: true, "default": false, "type": "Boolean" };
var g = { [s]: "Endpoint" };
var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
var j = {};
var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
var m = [g];
var n = [h];
var o = [i];
var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://execute-api-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ endpoint: { url: "https://execute-api-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://execute-api.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://execute-api.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
var ruleSet = _data;

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/endpoint/endpointResolver.js
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  });
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => ({
  apiVersion: "2018-11-29",
  base64Decoder: config?.base64Decoder ?? fromBase64,
  base64Encoder: config?.base64Encoder ?? toBase64,
  disableHostPrefix: config?.disableHostPrefix ?? false,
  endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
  logger: config?.logger ?? new NoOpLogger(),
  serviceId: config?.serviceId ?? "ApiGatewayManagementApi",
  urlParser: config?.urlParser ?? parseUrl,
  utf8Decoder: config?.utf8Decoder ?? fromUtf8,
  utf8Encoder: config?.utf8Encoder ?? toUtf8
});

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/runtimeConfig.js
var getRuntimeConfig2 = (config) => {
  emitWarningIfUnsupportedVersion(process.version);
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "node",
    defaultsMode,
    bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
    credentialDefaultProvider: config?.credentialDefaultProvider ?? decorateDefaultCredentialProvider(defaultProvider),
    defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: config?.maxAttempts ?? loadConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
    region: config?.region ?? loadConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),
    requestHandler: config?.requestHandler ?? new NodeHttpHandler(defaultConfigProvider),
    retryMode: config?.retryMode ?? loadConfig({
      ...NODE_RETRY_MODE_CONFIG_OPTIONS,
      default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE
    }),
    sha256: config?.sha256 ?? Hash.bind(null, "sha256"),
    streamCollector: config?.streamCollector ?? streamCollector,
    useDualstackEndpoint: config?.useDualstackEndpoint ?? loadConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
    useFipsEndpoint: config?.useFipsEndpoint ?? loadConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS)
  };
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/ApiGatewayManagementApiClient.js
var ApiGatewayManagementApiClient = class extends Client {
  constructor(configuration) {
    const _config_0 = getRuntimeConfig2(configuration);
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveRegionConfig(_config_1);
    const _config_3 = resolveEndpointConfig(_config_2);
    const _config_4 = resolveRetryConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveAwsAuthConfig(_config_5);
    const _config_7 = resolveUserAgentConfig(_config_6);
    super(_config_7);
    this.config = _config_7;
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getAwsAuthPlugin(this.config));
    this.middlewareStack.use(getUserAgentPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/models/ApiGatewayManagementApiServiceException.js
var ApiGatewayManagementApiServiceException = class extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, ApiGatewayManagementApiServiceException.prototype);
  }
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/models/models_0.js
var ForbiddenException = class extends ApiGatewayManagementApiServiceException {
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    this.name = "ForbiddenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, ForbiddenException.prototype);
  }
};
var GoneException = class extends ApiGatewayManagementApiServiceException {
  constructor(opts) {
    super({
      name: "GoneException",
      $fault: "client",
      ...opts
    });
    this.name = "GoneException";
    this.$fault = "client";
    Object.setPrototypeOf(this, GoneException.prototype);
  }
};
var LimitExceededException = class extends ApiGatewayManagementApiServiceException {
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, LimitExceededException.prototype);
  }
};
var PayloadTooLargeException = class extends ApiGatewayManagementApiServiceException {
  constructor(opts) {
    super({
      name: "PayloadTooLargeException",
      $fault: "client",
      ...opts
    });
    this.name = "PayloadTooLargeException";
    this.$fault = "client";
    Object.setPrototypeOf(this, PayloadTooLargeException.prototype);
    this.Message = opts.Message;
  }
};
var DeleteConnectionRequestFilterSensitiveLog = (obj) => ({
  ...obj
});
var GetConnectionRequestFilterSensitiveLog = (obj) => ({
  ...obj
});
var GetConnectionResponseFilterSensitiveLog = (obj) => ({
  ...obj
});
var PostToConnectionRequestFilterSensitiveLog = (obj) => ({
  ...obj
});

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/protocols/Aws_restJson1.js
var serializeAws_restJson1DeleteConnectionCommand = async (input, context) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers = {};
  let resolvedPath2 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/@connections/{ConnectionId}`;
  resolvedPath2 = resolvedPath(resolvedPath2, input, "ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
  let body;
  return new HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath2,
    body
  });
};
var serializeAws_restJson1GetConnectionCommand = async (input, context) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers = {};
  let resolvedPath2 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/@connections/{ConnectionId}`;
  resolvedPath2 = resolvedPath(resolvedPath2, input, "ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
  let body;
  return new HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath2,
    body
  });
};
var serializeAws_restJson1PostToConnectionCommand = async (input, context) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers = {
    "content-type": "application/octet-stream"
  };
  let resolvedPath2 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}/@connections/{ConnectionId}`;
  resolvedPath2 = resolvedPath(resolvedPath2, input, "ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
  let body;
  if (input.Data !== void 0) {
    body = input.Data;
  }
  return new HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath2,
    body
  });
};
var deserializeAws_restJson1DeleteConnectionCommand = async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return deserializeAws_restJson1DeleteConnectionCommandError(output, context);
  }
  const contents = map2({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var deserializeAws_restJson1DeleteConnectionCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ForbiddenException":
    case "com.amazonaws.apigatewaymanagementapi#ForbiddenException":
      throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
    case "GoneException":
    case "com.amazonaws.apigatewaymanagementapi#GoneException":
      throw await deserializeAws_restJson1GoneExceptionResponse(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.apigatewaymanagementapi#LimitExceededException":
      throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: ApiGatewayManagementApiServiceException,
        errorCode
      });
  }
};
var deserializeAws_restJson1GetConnectionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return deserializeAws_restJson1GetConnectionCommandError(output, context);
  }
  const contents = map2({
    $metadata: deserializeMetadata(output)
  });
  const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
  if (data.connectedAt != null) {
    contents.ConnectedAt = expectNonNull(parseRfc3339DateTimeWithOffset(data.connectedAt));
  }
  if (data.identity != null) {
    contents.Identity = deserializeAws_restJson1Identity(data.identity, context);
  }
  if (data.lastActiveAt != null) {
    contents.LastActiveAt = expectNonNull(parseRfc3339DateTimeWithOffset(data.lastActiveAt));
  }
  return contents;
};
var deserializeAws_restJson1GetConnectionCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ForbiddenException":
    case "com.amazonaws.apigatewaymanagementapi#ForbiddenException":
      throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
    case "GoneException":
    case "com.amazonaws.apigatewaymanagementapi#GoneException":
      throw await deserializeAws_restJson1GoneExceptionResponse(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.apigatewaymanagementapi#LimitExceededException":
      throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: ApiGatewayManagementApiServiceException,
        errorCode
      });
  }
};
var deserializeAws_restJson1PostToConnectionCommand = async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return deserializeAws_restJson1PostToConnectionCommandError(output, context);
  }
  const contents = map2({
    $metadata: deserializeMetadata(output)
  });
  await collectBody(output.body, context);
  return contents;
};
var deserializeAws_restJson1PostToConnectionCommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ForbiddenException":
    case "com.amazonaws.apigatewaymanagementapi#ForbiddenException":
      throw await deserializeAws_restJson1ForbiddenExceptionResponse(parsedOutput, context);
    case "GoneException":
    case "com.amazonaws.apigatewaymanagementapi#GoneException":
      throw await deserializeAws_restJson1GoneExceptionResponse(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.apigatewaymanagementapi#LimitExceededException":
      throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
    case "PayloadTooLargeException":
    case "com.amazonaws.apigatewaymanagementapi#PayloadTooLargeException":
      throw await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: ApiGatewayManagementApiServiceException,
        errorCode
      });
  }
};
var map2 = map;
var deserializeAws_restJson1ForbiddenExceptionResponse = async (parsedOutput, context) => {
  const contents = map2({});
  const data = parsedOutput.body;
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var deserializeAws_restJson1GoneExceptionResponse = async (parsedOutput, context) => {
  const contents = map2({});
  const data = parsedOutput.body;
  const exception = new GoneException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var deserializeAws_restJson1LimitExceededExceptionResponse = async (parsedOutput, context) => {
  const contents = map2({});
  const data = parsedOutput.body;
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var deserializeAws_restJson1PayloadTooLargeExceptionResponse = async (parsedOutput, context) => {
  const contents = map2({});
  const data = parsedOutput.body;
  if (data.message != null) {
    contents.Message = expectString(data.message);
  }
  const exception = new PayloadTooLargeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return decorateServiceException(exception, parsedOutput.body);
};
var deserializeAws_restJson1Identity = (output, context) => {
  return {
    SourceIp: expectString(output.sourceIp),
    UserAgent: expectString(output.userAgent)
  };
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var collectBody = (streamBody = new Uint8Array(), context) => {
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
});
var parseErrorBody = async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};
var loadRestJsonErrorCode = (output, data) => {
  const findKey = (object, key) => Object.keys(object).find((k2) => k2.toLowerCase() === key.toLowerCase());
  const sanitizeErrorCode = (rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/commands/DeleteConnectionCommand.js
var DeleteConnectionCommand = class extends Command {
  constructor(input) {
    super();
    this.input = input;
  }
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, DeleteConnectionCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger } = configuration;
    const clientName = "ApiGatewayManagementApiClient";
    const commandName = "DeleteConnectionCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: DeleteConnectionRequestFilterSensitiveLog,
      outputFilterSensitiveLog: (output) => output
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return serializeAws_restJson1DeleteConnectionCommand(input, context);
  }
  deserialize(output, context) {
    return deserializeAws_restJson1DeleteConnectionCommand(output, context);
  }
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/commands/GetConnectionCommand.js
var GetConnectionCommand = class extends Command {
  constructor(input) {
    super();
    this.input = input;
  }
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, GetConnectionCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger } = configuration;
    const clientName = "ApiGatewayManagementApiClient";
    const commandName = "GetConnectionCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: GetConnectionRequestFilterSensitiveLog,
      outputFilterSensitiveLog: GetConnectionResponseFilterSensitiveLog
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return serializeAws_restJson1GetConnectionCommand(input, context);
  }
  deserialize(output, context) {
    return deserializeAws_restJson1GetConnectionCommand(output, context);
  }
};

// ../../node_modules/@aws-sdk/client-apigatewaymanagementapi/dist-es/commands/PostToConnectionCommand.js
var PostToConnectionCommand = class extends Command {
  constructor(input) {
    super();
    this.input = input;
  }
  static getEndpointParameterInstructions() {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
    };
  }
  resolveMiddleware(clientStack, configuration, options) {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, PostToConnectionCommand.getEndpointParameterInstructions()));
    const stack = clientStack.concat(this.middlewareStack);
    const { logger } = configuration;
    const clientName = "ApiGatewayManagementApiClient";
    const commandName = "PostToConnectionCommand";
    const handlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PostToConnectionRequestFilterSensitiveLog,
      outputFilterSensitiveLog: (output) => output
    };
    const { requestHandler } = configuration;
    return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
  }
  serialize(input, context) {
    return serializeAws_restJson1PostToConnectionCommand(input, context);
  }
  deserialize(output, context) {
    return deserializeAws_restJson1PostToConnectionCommand(output, context);
  }
};

// websockets/index.ts
var InvalidConnectionError = class extends Error {
};
var WebSocketError = class extends Error {
};
var SocketConnection = class {
  client;
  encoder = new TextEncoder();
  connectionId;
  meta;
  constructor(params) {
    this.connectionId = params.connectionId;
    this.meta = params.meta;
    this.client = SocketManager.client;
  }
  static for(connectionId) {
    return new SocketConnection({ connectionId });
  }
  static async close(connectionId) {
    return await new SocketConnection({ connectionId }).close();
  }
  async send(data, options) {
    const { throwIfNotConnected = true } = options || {};
    const toSend = this.encoder.encode(typeof data === "string" ? data : JSON.stringify(data));
    try {
      const postToConnectionCmd = new PostToConnectionCommand({
        ConnectionId: this.connectionId,
        Data: toSend
      });
      await this.client.send(postToConnectionCmd);
    } catch (err) {
      if (err.message?.includes("Invalid connectionId") || err.name?.includes("GoneException")) {
        if (throwIfNotConnected) {
          throw new InvalidConnectionError(`Connection ${this.connectionId} is not connected`);
        }
        return;
      }
      throw new WebSocketError(err.message);
    }
  }
  async isConnected() {
    try {
      const getConnectionCmd = new GetConnectionCommand({
        ConnectionId: this.connectionId
      });
      await this.client.send(getConnectionCmd);
      return true;
    } catch (err) {
      if (err.message?.includes("Invalid connectionId") || err.name?.includes("GoneException")) {
        return false;
      }
      throw new WebSocketError(err.message);
    }
  }
  async close() {
    try {
      const deleteConnectionCmd = new DeleteConnectionCommand({
        ConnectionId: this.connectionId
      });
      await this.client.send(deleteConnectionCmd);
    } catch (err) {
      throw new WebSocketError(err.message);
    }
  }
};
var _SocketManager = class {
  listeners;
  constructor() {
    if (!_SocketManager.url) {
      throw new WebSocketError("AMPT_APP_WEBSOCKET_URL is not defined");
    }
  }
  on(event, ...args) {
    let [config, handler] = args;
    if (!handler) {
      handler = config;
      config = {};
    }
    this.listeners = this.listeners || {};
    this.listeners[event] = handler;
    let { timeout = 5e3 } = config || {};
    if (timeout > 6e4) {
      console.warn("Maximum timeout for event handlers is 60000 ms");
      timeout = 6e4;
    }
    switch (event) {
      case "connected": {
        addEventListener("socket:connected", this.handleNewConnection.bind(this), {
          source: "websocket",
          timeout,
          id: "socket:connected"
        });
        break;
      }
      case "disconnected": {
        addEventListener("socket:disconnected", this.handleDisconnect.bind(this), {
          source: "websocket",
          timeout,
          id: "socket:disconnected"
        });
        break;
      }
      case "message": {
        addEventListener("socket:message", this.handleMessage.bind(this), {
          source: "websocket",
          timeout,
          id: "socket:message"
        });
        break;
      }
    }
  }
  async handleNewConnection(event) {
    const { connectionId, connectParams } = event;
    const connection = new SocketConnection({
      connectionId,
      meta: connectParams
    });
    return this.listeners?.connected?.(connection);
  }
  async handleDisconnect(event) {
    const { connectionId, disconnectReason } = event;
    const connection = new SocketConnection({
      connectionId
    });
    return this.listeners?.disconnected?.(connection, disconnectReason);
  }
  async handleMessage(event) {
    const { connectionId, body } = event;
    if (body === "ping") {
      return await this.send(connectionId, "pong");
    }
    let msg;
    try {
      msg = body ? JSON.parse(body) : void 0;
    } catch (_e) {
      msg = body;
    }
    const connection = new SocketConnection({
      connectionId
    });
    return this.listeners?.message?.(connection, msg);
  }
  async send(connectionId, data, options) {
    return await SocketConnection.for(connectionId).send(data, options);
  }
  async close(connectionIds) {
    if (Array.isArray(connectionIds)) {
      return await Promise.all(connectionIds.map(SocketConnection.close));
    } else {
      return await SocketConnection.close(connectionIds);
    }
  }
  async isConnected(connectionId) {
    return await SocketConnection.for(connectionId).isConnected();
  }
};
var SocketManager = _SocketManager;
__publicField(SocketManager, "url", process.env.AMPT_APP_WEBSOCKET_URL?.replace("wss", "https"));
__publicField(SocketManager, "client", new ApiGatewayManagementApiClient({
  endpoint: _SocketManager.url,
  apiVersion: "2018-11-29"
}));
__publicField(SocketManager, "encoder", new TextEncoder());

export {
  InvalidConnectionError,
  WebSocketError,
  SocketManager
};
