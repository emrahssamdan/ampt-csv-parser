import { EventHandler } from './events'

export declare interface Task {
  every(expression: string, payload?: any): Task
  cron(expression: string, payload?: any): Task
  run(after?: string | any, payload?: any): Promise<TaskRunResult>

  // lifecycle events
  on(name: TaskLifeCycleEvent, handler: EventHandler): Task
}
export declare interface TaskOptions {
  timeout?: number
  attempts?: number
}
export declare interface TaskEvent {
  payload: any
}
export declare interface TaskContext {}
export declare interface TaskRunResult {}
export declare interface TaskHandler {
  (event?: TaskEvent, context?: TaskContext): Promise<any>
}
export declare type TaskLifeCycleEvent = 'started' | 'completed' | 'failed' | 'progress'

declare function task(name: string, handler?: TaskHandler): Task
declare function task(name: string, config?: TaskOptions, handler?: TaskHandler): Task

export { task }
export default task
