export type NewConnectionParams = {
  connectedAt: number
  queryStringParams?: { [key: string]: string }
  headers?: { [key: string]: string }
}

export declare class SocketConnection {
  connectionId: string
  meta?: NewConnectionParams
  static for(connectionId: string): SocketConnection
  static close(connectionId: string): Promise<void>
  send(data: any, options?: { throwIfNotConnected?: boolean }): Promise<void>
  isConnected(): Promise<boolean>
  close(): Promise<void>
}

export declare class SocketManager {
  send(connectionId: string, data: any, options?: { throwIfNotConnected?: boolean }): Promise<void>
  on(event: 'connected', handler: (connection: SocketConnection) => void | Promise<void>): void
  on(
    event: 'connected',
    config: { timeout: number },
    handler: (connection: SocketConnection) => void | Promise<void>
  ): void
  on(event: 'disconnected', handler: (connection: SocketConnection, reason?: string) => void | Promise<void>): void
  on(
    event: 'disconnected',
    config: { timeout: number },
    handler: (connection: SocketConnection, reason?: string) => void | Promise<void>
  ): void
  on<T>(
    event: 'message',
    handler: (connection: SocketConnection, data?: string | T | any) => void | Promise<void>
  ): void
  on<T>(
    event: 'message',
    config: { timeout: number },
    handler: (connection: SocketConnection, data?: string | T | any) => void | Promise<void>
  ): void
  isConnected(connectionId: string): Promise<boolean>
  close(connectionIds: string | string[]): Promise<void | void[]>
}

declare const ws: SocketManager
export default ws
